{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","console","log","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","About","myStyle","setMyStyle","btnText","setBtnText","border","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4d322b11.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">\r\n                        {props.title}\r\n                    </Link>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#navbarSupportedContent\"\r\n                        aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                                    Home\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">\r\n                                    {props.about}\r\n                                </Link>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input\r\n                                className=\"form-control me-2\"\r\n                                type=\"search\"\r\n                                placeholder=\"Search\"\r\n                                aria-label=\"Search\"\r\n                            />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                                Search\r\n                            </button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\nNavbar.propTypes={title: PropTypes.string.isRequired,\r\n                  about: PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps ={title: 'Textutils',\r\n                      about: 'About Us'}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText]=useState('');\r\n\r\n    const handleUpClick=()=>{\r\n        console.log(\"uppercase clicked\")\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('converted to uppercase','success');\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n        let newText='';\r\n        setText(newText);\r\n        props.showAlert('text cleared','success');\r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        console.log(\"lowercase clicked\")\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('converted to lowercase','success');\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        let text=document.getElementById('box')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('copied to clipboard','success');\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/)\r\n        setText(newText.join(' '))\r\n        props.showAlert('Extra spaces removed','success');\r\n    }\r\n    return (\r\n        <>\r\n        <div  style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'black':'white', color: props.mode==='dark'?'white':'black'}} value={text} id=\"box\" rows=\"7\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>remove extra spaces</button>\r\n\r\n        </div>\r\n        <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2 className=\"my-3\">Your text summary</h2>\r\n            <table>\r\n                <tr>\r\n                    <th>Words</th>\r\n                    <th>characters</th>\r\n                    <th>time taken</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>{text.split(\" \").length}</td>\r\n                    <td>{text.length}</td>\r\n                    <td>{0.008 * text.split(\" \").length}</td>\r\n                </tr>\r\n            </table>\r\n            {/* <p>\r\n               {text.split(\" \").length} words and {text.length} characters\r\n            </p>\r\n            <p>\r\n                {0.008 * text.split(\" \").length} minutes taken to read.\r\n            </p>\r\n            <h2>Preview</h2>\r\n            <p>\r\n                {text.length>0?text:\"Enter something in textbox to preview\"}\r\n            </p> */}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle]=useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n    })\r\n    const [btnText, setBtnText]=useState('Enable light mode')\r\n\r\n    const toggleStyle=()=>{\r\n        if(myStyle.color==='white'){\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText('enable dark mode')\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText('Enable light mode')\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container my-5\" style={myStyle}>\r\n            <h2 className=\"my-3\">About us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle}  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-4\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong>{capitalize(props.alert.type)}: </strong> {props.alert.message}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n    )\r\n}\r\n","import Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React,{useState} from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      message:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1800);\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='black';\n      showAlert('Dark mode is enabled','success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert('Light mode is enabled','success');\n    }\n  }\n  return (\n    <>\n    <Router>\n    <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode}/> \n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n    <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          </Route>\n        </Switch>\n    </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}